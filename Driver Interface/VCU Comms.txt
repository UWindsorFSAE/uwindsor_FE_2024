/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdbool.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
static void MX_GPIO_Init(void);
static void MX_FDCAN2_Init(void);
static void MX_FDCAN1_Init(void);
/* USER CODE BEGIN PFP */
bool FaultCheck(uint8_t StatusWordMatrix[2]);
bool SwitchOnDisabled(uint8_t StatusWordMatrix[2]);
bool SwitchOnReady(uint8_t StatusWordMatrix[2]);
bool SwitchOn(uint8_t StatusWordMatrix[2]);
bool OperationEnabled(uint8_t StatusWordMatrix[2]);
uint16_t HVEnabled(uint8_t StatusWordMatrix[2]);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

  FDCAN_TxHeaderTypeDef    TxHeader1;
  FDCAN_TxHeaderTypeDef    TxHeader2;
  FDCAN_TxHeaderTypeDef    TxHeader3;
  FDCAN_TxHeaderTypeDef    TxHeader4;
  FDCAN_TxHeaderTypeDef    ArduinoHeader;
  FDCAN_RxHeaderTypeDef    RxHeader1;
  FDCAN_RxHeaderTypeDef    RxHeader2;
  uint8_t                  TxData1[8];
  uint8_t                  TxData2[2];
  uint8_t                  TxData3[2];
  uint8_t                  TxData4[2];
  uint8_t                  ArduinoMsg[2];
  uint8_t                  RxData1[8];
  uint8_t                  RxData2[8];
  uint8_t                  Prechargests;
  uint8_t                  BPPSsts;
  uint8_t                  IMDsts;
  uint8_t                  BMSFaultsts;
  uint8_t                  ReadyToDrive;
  uint8_t                  RegenBraking;
  uint32_t                 TxMailbox; // Combines Header and Data info into a single CAN frame
  uint16_t                 Faultsts;
  uint16_t                 Switchsts;
  uint16_t                 HVsts;
  uint16_t                 StatusWord;


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_FDCAN2_Init();
  MX_FDCAN1_Init();
  /* USER CODE BEGIN 2 */

  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
  {
	  Error_Handler();
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
  {
	  Error_Handler();
  }

  if(HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
  {
	  Error_Handler();
  }



  //CAN message to send inverter into operational
  TxHeader1.Identifier = 0x101;
  TxHeader1.IdType = FDCAN_STANDARD_ID;
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
  TxHeader1.FDFormat = FDCAN_FD_CAN;
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
  TxHeader1.MessageMarker = 0;

  TxData1[0] = 0x01;
  TxData1[1] = 0x02;
  TxData1[2] = 0x03;
  TxData1[3] = 0x04;
  TxData1[4] = 0x05;
  TxData1[5] = 0x06;
  TxData1[6] = 0x07;
  TxData1[7] = 0x08;

  TxHeader2.Identifier = 0x100;
  TxHeader2.IdType = FDCAN_STANDARD_ID;
  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader2.DataLength = FDCAN_DLC_BYTES_2;
  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
  TxHeader2.FDFormat = FDCAN_FD_CAN;
  TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
  TxHeader2.MessageMarker = 0;

  TxData2[0] = 0x06;
  TxData2[1] = 0x00;

  TxHeader3.Identifier = 0x102;
  TxHeader3.IdType = FDCAN_STANDARD_ID;
  TxHeader3.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader3.DataLength = FDCAN_DLC_BYTES_2;
  TxHeader3.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader3.BitRateSwitch = FDCAN_BRS_OFF;
  TxHeader3.FDFormat = FDCAN_FD_CAN;
  TxHeader3.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
  TxHeader3.MessageMarker = 0;

  TxData3[0] = 0x07;
  TxData3[1] = 0x00;

  TxHeader4.Identifier = 0x103;
  TxHeader4.IdType = FDCAN_STANDARD_ID;
  TxHeader4.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader4.DataLength = FDCAN_DLC_BYTES_2;
  TxHeader4.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader4.BitRateSwitch = FDCAN_BRS_OFF;
  TxHeader4.FDFormat = FDCAN_FD_CAN;
  TxHeader4.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
  TxHeader4.MessageMarker = 0;

  TxData4[0] = 0x0F;
  TxData4[1] = 0x00;

  ArduinoHeader.Identifier = 0x666;
  ArduinoHeader.IdType = FDCAN_STANDARD_ID;
  ArduinoHeader.TxFrameType = FDCAN_DATA_FRAME;
  ArduinoHeader.DataLength = FDCAN_DLC_BYTES_2;
  ArduinoHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  ArduinoHeader.BitRateSwitch = FDCAN_BRS_OFF;
  ArduinoHeader.FDFormat = FDCAN_FD_CAN;
  ArduinoHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
  ArduinoHeader.MessageMarker = 0;

  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader1, TxData1);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO1, &RxHeader1, RxData1);
	  //HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader1, RxData1);
	  //HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader1, TxData1);
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader1, TxData1);
	  //HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2);
	  //HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader3, TxData3);
	  //HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader4, TxData4);


	           // Status Word
	           /*if(RxHeader1.Identifier == 0x141){
	          	 HVEnabled(RxData1);
	          	 ReadyToDrive = 1;
	           }

	           // Inverter
	           if (RxHeader1.Identifier == 0x195){
	          	 RegenBraking = 1;
	           }

	           //BMS
	           if(RxHeader1.Identifier == 0x555){ // Arbitrary ID
	          	 Prechargests = RxData1[0] & 0b00000011; // Needs at least 2 bits
	           }

	           BPPSsts = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
	           IMDsts = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
	           BMSFaultsts = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_5);

	           ArduinoMsg[1] = (HVsts << 7) | (ReadyToDrive << 6) | (Prechargests << 4) | (BPPSsts << 3) | (IMDsts << 2) | (BMSFaultsts << 1) | RegenBraking;
	           //HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &ArduinoHeader, ArduinoMsg);


	           // Sends shutdown command
	           /*if(FaultCheck == true && SwitchOnDisabled == true){
	          	 HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader2, TxData2);
	           }

	           if(RxHeader.Identifier == 0x141){
	               SwitchOnReady(RxData);
	           }

	           // Send switch on command
	           if(SwitchOnReady == true){
	          	 HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader3, TxData3);
	           }

	           if(RxHeader.Identifier == 0x141){
	               SwitchOn(RxData);
	           }

	           if(SwitchOn == true){
	          	 HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader4, TxData4);
	           }

	           if(RxHeader.Identifier == 0x141){
	               OperationEnabled(RxData);
	           }

	           if(OperationEnabled == true){
	          	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);*/
	           }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 12;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{

  /* USER CODE BEGIN FDCAN1_Init 0 */

  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 1;
  hfdcan1.Init.NominalSyncJumpWidth = 13;
  hfdcan1.Init.NominalTimeSeg1 = 34;
  hfdcan1.Init.NominalTimeSeg2 = 13;
  hfdcan1.Init.DataPrescaler = 25;
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 2;
  hfdcan1.Init.DataTimeSeg2 = 1;
  hfdcan1.Init.MessageRAMOffset = 0;
  hfdcan1.Init.StdFiltersNbr = 1;
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.RxBuffersNbr = 0;
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.TxEventsNbr = 0;
  hfdcan1.Init.TxBuffersNbr = 0;
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  sFilterConfig.FilterID1 = 0x196;
  sFilterConfig.FilterID2 = 0x196;
  sFilterConfig.RxBufferIndex = 0;
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
  {
	  /* Filter configuration Error */
	  Error_Handler();
  }
  /* USER CODE END FDCAN1_Init 2 */

}

/**
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{

  /* USER CODE BEGIN FDCAN2_Init 0 */

  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = ENABLE;
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 1;
  hfdcan2.Init.NominalSyncJumpWidth = 13;
  hfdcan2.Init.NominalTimeSeg1 = 34;
  hfdcan2.Init.NominalTimeSeg2 = 13;
  hfdcan2.Init.DataPrescaler = 25;
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 2;
  hfdcan2.Init.DataTimeSeg2 = 1;
  hfdcan2.Init.MessageRAMOffset = 11;
  hfdcan2.Init.StdFiltersNbr = 1;
  hfdcan2.Init.ExtFiltersNbr = 0;
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.RxBuffersNbr = 0;
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.TxEventsNbr = 0;
  hfdcan2.Init.TxBuffersNbr = 0;
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
  sFilterConfig.RxBufferIndex = 0;
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
  {
	  /* Filter configuration Error */
	  Error_Handler();
  }

  /* USER CODE END FDCAN2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

bool FaultCheck(uint8_t StatusWordMatrix[2]){
	uint16_t FaultMask = 0x0008;
	StatusWord = StatusWordMatrix[0] << 8 | StatusWordMatrix[1];
	Faultsts = StatusWord & FaultMask;
	if(Faultsts == 0x0000){
		return true;
	}
	else{
		return false;
	}
}

bool SwitchOnDisabled(uint8_t StatusWordMatrix[2]){
	uint16_t SwitchDMask = 0x004F;
	StatusWord = StatusWordMatrix[0] << 8 | StatusWordMatrix[1];
	Switchsts = StatusWord & SwitchDMask;
	if(Switchsts == 0x0040){
		return true;
	}
	else{
		return false;
	}
}

uint16_t HVEnabled(uint8_t StatusWordMatrix[2]){
	     uint16_t SwitchDMask = 0x10;
	     StatusWord = StatusWordMatrix[0] << 8 | StatusWordMatrix[1];
	     HVsts = StatusWord & SwitchDMask;
	     if(HVsts == 0x10){
	    	 HVsts = 1;
	     }
	     if(HVsts == 0x00){
	    	 HVsts = 0;
	     }
       	 return HVsts;
}

bool SwitchOnReady(uint8_t StatusWordMatrix[2]){
	uint16_t SwitchRMask = 0x006F;
	StatusWord = StatusWordMatrix[0] << 8 | StatusWordMatrix[1];
	Switchsts = StatusWord & SwitchRMask;
	if(Switchsts == 0x0021){
		return true;
	}
	else{
		return false;
	}
}

bool SwitchOn(uint8_t StatusWordMatrix[2]){
	uint16_t SwitchRMask = 0x006F;
	StatusWord = StatusWordMatrix[0] << 8 | StatusWordMatrix[1];
	Switchsts = StatusWord & SwitchRMask;
	if(Switchsts == 0x0023){
		return true;
	}
	else{
		return false;
	}
}

bool OperationEnabled(uint8_t StatusWordMatrix[2]){
	uint16_t SwitchRMask = 0x006F;
	StatusWord = StatusWordMatrix[0] << 8 | StatusWordMatrix[1];
	Switchsts = StatusWord & SwitchRMask;
	if(Switchsts == 0x0027){
		return true;
	}
	else{
		return false;
	}
}


/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
